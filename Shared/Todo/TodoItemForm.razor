@using TodoListSB76764.Data.TodoData;
@inject TodoService _todoService;

<EditForm Model="@NewItem" OnSubmit="@AddItemAsync">
    <div class="d-flex align-items-center flex-grow-1 flex-column flex-sm-row">
        <div class="d-flex w-100 me-2 align-items-center">
            <div class="me-2">Text:</div>
            <InputText @bind-Value="NewItem.Text" class="form-control flex-grow-1"  id="Item" />
        </div>
        <div class="d-flex mt-2 mt-sm-0 align-self-end justify-content-between">
            <input type="submit" class="btn btn-primary me-2"  value="Add" />
            <input type="reset" class="btn btn-secondary" value="Clear" />
        </div>
    </div>
</EditForm>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }

    [Parameter]
    public required EventCallback<TodoItem> OnItemAdded { get; set; }

    private string UserIdentityName = "";
    private TodoItem NewItem = new TodoItem { Text = "", OwnerUserName = "" };

    protected override async Task OnInitializedAsync()
    {
        if (authenticationStateTask != null)
        {
            var user = (await authenticationStateTask).User;
            if (user.Identity != null)
            {
                UserIdentityName = user.Identity.Name ?? "";
            }
        }
    }

    public async Task AddItemAsync()
    {
        var newItem = new TodoItem { Text = NewItem.Text!, OwnerUserName = UserIdentityName };
        var item = await _todoService.AddTodoItemAsync(newItem);
        await OnItemAdded.InvokeAsync();

    }
}
